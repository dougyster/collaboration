# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from backend.distributed import distributed_server_pb2 as distributed__server__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in distributed_server_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DistributedServiceStub(object):
    """Service for server-to-server communication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestVote = channel.unary_unary(
                '/distributed.DistributedService/RequestVote',
                request_serializer=distributed__server__pb2.VoteRequest.SerializeToString,
                response_deserializer=distributed__server__pb2.VoteResponse.FromString,
                _registered_method=True)
        self.SendHeartbeat = channel.unary_unary(
                '/distributed.DistributedService/SendHeartbeat',
                request_serializer=distributed__server__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=distributed__server__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.ReplicateCommand = channel.unary_unary(
                '/distributed.DistributedService/ReplicateCommand',
                request_serializer=distributed__server__pb2.CommandRequest.SerializeToString,
                response_deserializer=distributed__server__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.SyncState = channel.unary_unary(
                '/distributed.DistributedService/SyncState',
                request_serializer=distributed__server__pb2.SyncRequest.SerializeToString,
                response_deserializer=distributed__server__pb2.SyncResponse.FromString,
                _registered_method=True)
        self.CreateUser = channel.unary_unary(
                '/distributed.DistributedService/CreateUser',
                request_serializer=distributed__server__pb2.UserRequest.SerializeToString,
                response_deserializer=distributed__server__pb2.UserResponse.FromString,
                _registered_method=True)
        self.AuthenticateUser = channel.unary_unary(
                '/distributed.DistributedService/AuthenticateUser',
                request_serializer=distributed__server__pb2.AuthRequest.SerializeToString,
                response_deserializer=distributed__server__pb2.AuthResponse.FromString,
                _registered_method=True)
        self.CreateDocument = channel.unary_unary(
                '/distributed.DistributedService/CreateDocument',
                request_serializer=distributed__server__pb2.DocRequest.SerializeToString,
                response_deserializer=distributed__server__pb2.DocResponse.FromString,
                _registered_method=True)
        self.UpdateDocument = channel.unary_unary(
                '/distributed.DistributedService/UpdateDocument',
                request_serializer=distributed__server__pb2.DocUpdateRequest.SerializeToString,
                response_deserializer=distributed__server__pb2.DocUpdateResponse.FromString,
                _registered_method=True)
        self.DeleteDocument = channel.unary_unary(
                '/distributed.DistributedService/DeleteDocument',
                request_serializer=distributed__server__pb2.DocDeleteRequest.SerializeToString,
                response_deserializer=distributed__server__pb2.DocDeleteResponse.FromString,
                _registered_method=True)
        self.AddUserToDocument = channel.unary_unary(
                '/distributed.DistributedService/AddUserToDocument',
                request_serializer=distributed__server__pb2.DocUserRequest.SerializeToString,
                response_deserializer=distributed__server__pb2.DocUserResponse.FromString,
                _registered_method=True)
        self.RemoveUserFromDocument = channel.unary_unary(
                '/distributed.DistributedService/RemoveUserFromDocument',
                request_serializer=distributed__server__pb2.DocUserRequest.SerializeToString,
                response_deserializer=distributed__server__pb2.DocUserResponse.FromString,
                _registered_method=True)


class DistributedServiceServicer(object):
    """Service for server-to-server communication
    """

    def RequestVote(self, request, context):
        """Leader election and heartbeat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateCommand(self, request, context):
        """State replication
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUser(self, request, context):
        """Data operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthenticateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUserToDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveUserFromDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DistributedServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=distributed__server__pb2.VoteRequest.FromString,
                    response_serializer=distributed__server__pb2.VoteResponse.SerializeToString,
            ),
            'SendHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHeartbeat,
                    request_deserializer=distributed__server__pb2.HeartbeatRequest.FromString,
                    response_serializer=distributed__server__pb2.HeartbeatResponse.SerializeToString,
            ),
            'ReplicateCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateCommand,
                    request_deserializer=distributed__server__pb2.CommandRequest.FromString,
                    response_serializer=distributed__server__pb2.CommandResponse.SerializeToString,
            ),
            'SyncState': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncState,
                    request_deserializer=distributed__server__pb2.SyncRequest.FromString,
                    response_serializer=distributed__server__pb2.SyncResponse.SerializeToString,
            ),
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=distributed__server__pb2.UserRequest.FromString,
                    response_serializer=distributed__server__pb2.UserResponse.SerializeToString,
            ),
            'AuthenticateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthenticateUser,
                    request_deserializer=distributed__server__pb2.AuthRequest.FromString,
                    response_serializer=distributed__server__pb2.AuthResponse.SerializeToString,
            ),
            'CreateDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDocument,
                    request_deserializer=distributed__server__pb2.DocRequest.FromString,
                    response_serializer=distributed__server__pb2.DocResponse.SerializeToString,
            ),
            'UpdateDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDocument,
                    request_deserializer=distributed__server__pb2.DocUpdateRequest.FromString,
                    response_serializer=distributed__server__pb2.DocUpdateResponse.SerializeToString,
            ),
            'DeleteDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDocument,
                    request_deserializer=distributed__server__pb2.DocDeleteRequest.FromString,
                    response_serializer=distributed__server__pb2.DocDeleteResponse.SerializeToString,
            ),
            'AddUserToDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUserToDocument,
                    request_deserializer=distributed__server__pb2.DocUserRequest.FromString,
                    response_serializer=distributed__server__pb2.DocUserResponse.SerializeToString,
            ),
            'RemoveUserFromDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveUserFromDocument,
                    request_deserializer=distributed__server__pb2.DocUserRequest.FromString,
                    response_serializer=distributed__server__pb2.DocUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'distributed.DistributedService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('distributed.DistributedService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DistributedService(object):
    """Service for server-to-server communication
    """

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed.DistributedService/RequestVote',
            distributed__server__pb2.VoteRequest.SerializeToString,
            distributed__server__pb2.VoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed.DistributedService/SendHeartbeat',
            distributed__server__pb2.HeartbeatRequest.SerializeToString,
            distributed__server__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed.DistributedService/ReplicateCommand',
            distributed__server__pb2.CommandRequest.SerializeToString,
            distributed__server__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SyncState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed.DistributedService/SyncState',
            distributed__server__pb2.SyncRequest.SerializeToString,
            distributed__server__pb2.SyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed.DistributedService/CreateUser',
            distributed__server__pb2.UserRequest.SerializeToString,
            distributed__server__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AuthenticateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed.DistributedService/AuthenticateUser',
            distributed__server__pb2.AuthRequest.SerializeToString,
            distributed__server__pb2.AuthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed.DistributedService/CreateDocument',
            distributed__server__pb2.DocRequest.SerializeToString,
            distributed__server__pb2.DocResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed.DistributedService/UpdateDocument',
            distributed__server__pb2.DocUpdateRequest.SerializeToString,
            distributed__server__pb2.DocUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed.DistributedService/DeleteDocument',
            distributed__server__pb2.DocDeleteRequest.SerializeToString,
            distributed__server__pb2.DocDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddUserToDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed.DistributedService/AddUserToDocument',
            distributed__server__pb2.DocUserRequest.SerializeToString,
            distributed__server__pb2.DocUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveUserFromDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed.DistributedService/RemoveUserFromDocument',
            distributed__server__pb2.DocUserRequest.SerializeToString,
            distributed__server__pb2.DocUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
