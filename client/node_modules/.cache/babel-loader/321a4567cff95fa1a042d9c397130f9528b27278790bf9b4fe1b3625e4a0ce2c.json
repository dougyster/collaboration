{"ast":null,"code":"import axios from 'axios';\nimport { API_SERVERS, DEFAULT_SERVER, REQUEST_TIMEOUT, MAX_RETRIES, RETRY_DELAY } from '../config';\n\n/**\n * API Client for the distributed collaboration system\n * Handles communication with the backend servers, including retries and failover\n */\nclass ApiClient {\n  constructor() {\n    this.currentServerIndex = 0;\n    this.currentServer = DEFAULT_SERVER;\n    this.axios = axios.create({\n      baseURL: this.currentServer,\n      timeout: REQUEST_TIMEOUT,\n      withCredentials: true\n    });\n  }\n\n  /**\n   * Switch to the next available server in the cluster\n   */\n  switchServer() {\n    this.currentServerIndex = (this.currentServerIndex + 1) % API_SERVERS.length;\n    this.currentServer = API_SERVERS[this.currentServerIndex];\n    this.axios.defaults.baseURL = this.currentServer;\n    console.log(`Switched to server: ${this.currentServer}`);\n  }\n\n  /**\n   * Make an API request with automatic retries and server failover\n   * @param {String} method - HTTP method (get, post, put, delete)\n   * @param {String} url - API endpoint\n   * @param {Object} data - Request data (for POST, PUT)\n   * @param {Object} config - Additional axios config\n   * @returns {Promise} - Promise resolving to the API response\n   */\n  async request(method, url, data = null, config = {}) {\n    // Make sure username is included in all requests to avoid session confusion\n    // But only add it as a query parameter for GET and DELETE requests\n    // For POST and PUT, we'll include it in the request body\n    const username = localStorage.getItem('username');\n    const isGetOrDelete = method.toLowerCase() === 'get' || method.toLowerCase() === 'delete';\n    if (username && isGetOrDelete) {\n      if (!url.includes('?')) {\n        url = `${url}?username=${encodeURIComponent(username)}`;\n      } else if (!url.includes('username=')) {\n        url = `${url}&username=${encodeURIComponent(username)}`;\n      }\n    }\n    let retries = 0;\n    let lastError = null;\n    while (retries < MAX_RETRIES * API_SERVERS.length) {\n      try {\n        let response;\n        if (method.toLowerCase() === 'get') {\n          response = await this.axios.get(url, config);\n        } else if (method.toLowerCase() === 'post') {\n          response = await this.axios.post(url, data, config);\n        } else if (method.toLowerCase() === 'put') {\n          response = await this.axios.put(url, data, config);\n        } else if (method.toLowerCase() === 'delete') {\n          response = await this.axios.delete(url, config);\n        }\n\n        // If we get a redirect to the leader, follow it\n        if (response.data && response.data.redirect_to_leader) {\n          const leaderUrl = response.data.leader_url;\n          console.log(`Redirecting to leader: ${leaderUrl}`);\n          this.axios.defaults.baseURL = leaderUrl;\n          this.currentServer = leaderUrl;\n\n          // Retry the request with the leader\n          if (method.toLowerCase() === 'get') {\n            response = await this.axios.get(url, config);\n          } else if (method.toLowerCase() === 'post') {\n            response = await this.axios.post(url, data, config);\n          } else if (method.toLowerCase() === 'put') {\n            response = await this.axios.put(url, data, config);\n          } else if (method.toLowerCase() === 'delete') {\n            response = await this.axios.delete(url, config);\n          }\n        }\n        return response.data;\n      } catch (error) {\n        lastError = error;\n        retries++;\n\n        // If we've tried all servers, wait before cycling through them again\n        if (retries % API_SERVERS.length === 0) {\n          await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n        } else {\n          // Try the next server\n          this.switchServer();\n        }\n      }\n    }\n\n    // If all retries failed, throw the last error\n    throw lastError;\n  }\n\n  // Convenience methods for different HTTP verbs\n  async get(url, config = {}) {\n    return this.request('get', url, null, config);\n  }\n  async post(url, data = {}, config = {}) {\n    return this.request('post', url, data, config);\n  }\n  async put(url, data = {}, config = {}) {\n    return this.request('put', url, data, config);\n  }\n  async delete(url, config = {}) {\n    return this.request('delete', url, config);\n  }\n\n  // Authentication methods\n  async login(username, password) {\n    const response = await this.post('/api/login', {\n      username,\n      password\n    });\n    if (response.success) {\n      localStorage.setItem('username', username);\n    }\n    return response;\n  }\n  async register(username, password) {\n    const response = await this.post('/api/register', {\n      username,\n      password\n    });\n    if (response.success) {\n      localStorage.setItem('username', username);\n    }\n    return response;\n  }\n  async logout() {\n    const response = await this.post('/api/logout');\n    if (response.success) {\n      localStorage.removeItem('username');\n    }\n    return response;\n  }\n  async checkAuth() {\n    const username = localStorage.getItem('username');\n    if (!username) {\n      return {\n        success: false\n      };\n    }\n    try {\n      return await this.get(`/api/user?username=${encodeURIComponent(username)}`);\n    } catch (error) {\n      localStorage.removeItem('username');\n      return {\n        success: false\n      };\n    }\n  }\n\n  // Document methods\n  async getDocuments() {\n    const username = this.getCurrentUsername();\n    return this.get(`/api/documents?username=${encodeURIComponent(username)}`);\n  }\n  async getDocument(documentId) {\n    const username = this.getCurrentUsername();\n    return this.get(`/api/documents/${documentId}?username=${encodeURIComponent(username)}`);\n  }\n  async createDocument(title) {\n    const username = localStorage.getItem('username');\n    return this.post('/api/documents', {\n      title,\n      username\n    });\n  }\n  async updateDocumentContent(documentId, content) {\n    const username = localStorage.getItem('username');\n    return this.put(`/api/documents/${documentId}/content`, {\n      content,\n      username\n    });\n  }\n  async updateDocumentTitle(documentId, title) {\n    const username = localStorage.getItem('username');\n    return this.put(`/api/documents/${documentId}/title`, {\n      title,\n      username\n    });\n  }\n  async deleteDocument(documentId) {\n    const username = localStorage.getItem('username');\n    return this.delete(`/api/documents/${documentId}?username=${encodeURIComponent(username)}`);\n  }\n  async getUsers() {\n    const username = localStorage.getItem('username');\n    return this.get(`/api/users?username=${encodeURIComponent(username)}`);\n  }\n  async addUserToDocument(documentId, userToAdd) {\n    const currentUsername = localStorage.getItem('username');\n\n    // Enhanced debugging for username retrieval\n    console.log('DEBUG - localStorage contents:', {\n      username: localStorage.getItem('username'),\n      allKeys: Object.keys(localStorage),\n      documentId,\n      userToAdd\n    });\n\n    // Check if username is missing and provide clear error\n    if (!currentUsername) {\n      console.error('ERROR: No username found in localStorage! User must be logged in to share documents.');\n      return Promise.reject(new Error('No username found in localStorage. Please log out and log back in.'));\n    }\n    console.log(`User ${currentUsername} sharing document ${documentId} with user ${userToAdd}`);\n\n    // Pass both the current user (owner_username) and the user to add (username)\n    return this.post(`/api/documents/${documentId}/users`, {\n      username: userToAdd,\n      owner_username: currentUsername\n    });\n  }\n  async removeUserFromDocument(documentId, userToRemove) {\n    const currentUsername = localStorage.getItem('username');\n    console.log(`User ${currentUsername} removing user ${userToRemove} from document ${documentId}`);\n\n    // Pass the owner_username as a query parameter for DELETE requests\n    return this.delete(`/api/documents/${documentId}/users/${userToRemove}?owner_username=${encodeURIComponent(currentUsername)}`);\n  }\n  async getClusterStatus() {\n    return this.get('/api/cluster/status');\n  }\n\n  /**\n   * Helper method to get the current username from localStorage\n   * Handles both direct username and username stored in collaborationUser object\n   */\n  getCurrentUsername() {\n    // First try to get username directly (for backward compatibility)\n    const directUsername = localStorage.getItem('username');\n    if (directUsername) return directUsername;\n\n    // If not found, try to get it from the collaborationUser object\n    const userJson = localStorage.getItem('collaborationUser');\n    if (userJson) {\n      try {\n        const userObj = JSON.parse(userJson);\n        if (userObj && userObj.username) {\n          // For convenience, also set it directly for future use\n          localStorage.setItem('username', userObj.username);\n          return userObj.username;\n        }\n      } catch (e) {\n        console.error('Error parsing user JSON from localStorage:', e);\n      }\n    }\n    return null;\n  }\n}\n\n// Create and export a singleton instance\nconst apiClient = new ApiClient();\nexport default apiClient;","map":{"version":3,"names":["axios","API_SERVERS","DEFAULT_SERVER","REQUEST_TIMEOUT","MAX_RETRIES","RETRY_DELAY","ApiClient","constructor","currentServerIndex","currentServer","create","baseURL","timeout","withCredentials","switchServer","length","defaults","console","log","request","method","url","data","config","username","localStorage","getItem","isGetOrDelete","toLowerCase","includes","encodeURIComponent","retries","lastError","response","get","post","put","delete","redirect_to_leader","leaderUrl","leader_url","error","Promise","resolve","setTimeout","login","password","success","setItem","register","logout","removeItem","checkAuth","getDocuments","getCurrentUsername","getDocument","documentId","createDocument","title","updateDocumentContent","content","updateDocumentTitle","deleteDocument","getUsers","addUserToDocument","userToAdd","currentUsername","allKeys","Object","keys","reject","Error","owner_username","removeUserFromDocument","userToRemove","getClusterStatus","directUsername","userJson","userObj","JSON","parse","e","apiClient"],"sources":["/Users/doug/collaboration/client/src/services/ApiClient.js"],"sourcesContent":["import axios from 'axios';\nimport { API_SERVERS, DEFAULT_SERVER, REQUEST_TIMEOUT, MAX_RETRIES, RETRY_DELAY } from '../config';\n\n/**\n * API Client for the distributed collaboration system\n * Handles communication with the backend servers, including retries and failover\n */\nclass ApiClient {\n  constructor() {\n    this.currentServerIndex = 0;\n    this.currentServer = DEFAULT_SERVER;\n    this.axios = axios.create({\n      baseURL: this.currentServer,\n      timeout: REQUEST_TIMEOUT,\n      withCredentials: true\n    });\n  }\n\n  /**\n   * Switch to the next available server in the cluster\n   */\n  switchServer() {\n    this.currentServerIndex = (this.currentServerIndex + 1) % API_SERVERS.length;\n    this.currentServer = API_SERVERS[this.currentServerIndex];\n    this.axios.defaults.baseURL = this.currentServer;\n    console.log(`Switched to server: ${this.currentServer}`);\n  }\n\n  /**\n   * Make an API request with automatic retries and server failover\n   * @param {String} method - HTTP method (get, post, put, delete)\n   * @param {String} url - API endpoint\n   * @param {Object} data - Request data (for POST, PUT)\n   * @param {Object} config - Additional axios config\n   * @returns {Promise} - Promise resolving to the API response\n   */\n  async request(method, url, data = null, config = {}) {\n    // Make sure username is included in all requests to avoid session confusion\n    // But only add it as a query parameter for GET and DELETE requests\n    // For POST and PUT, we'll include it in the request body\n    const username = localStorage.getItem('username');\n    const isGetOrDelete = method.toLowerCase() === 'get' || method.toLowerCase() === 'delete';\n    \n    if (username && isGetOrDelete) {\n      if (!url.includes('?')) {\n        url = `${url}?username=${encodeURIComponent(username)}`;\n      } else if (!url.includes('username=')) {\n        url = `${url}&username=${encodeURIComponent(username)}`;\n      }\n    }\n\n    let retries = 0;\n    let lastError = null;\n\n    while (retries < MAX_RETRIES * API_SERVERS.length) {\n      try {\n        let response;\n        \n        if (method.toLowerCase() === 'get') {\n          response = await this.axios.get(url, config);\n        } else if (method.toLowerCase() === 'post') {\n          response = await this.axios.post(url, data, config);\n        } else if (method.toLowerCase() === 'put') {\n          response = await this.axios.put(url, data, config);\n        } else if (method.toLowerCase() === 'delete') {\n          response = await this.axios.delete(url, config);\n        }\n\n        // If we get a redirect to the leader, follow it\n        if (response.data && response.data.redirect_to_leader) {\n          const leaderUrl = response.data.leader_url;\n          console.log(`Redirecting to leader: ${leaderUrl}`);\n          this.axios.defaults.baseURL = leaderUrl;\n          this.currentServer = leaderUrl;\n          \n          // Retry the request with the leader\n          if (method.toLowerCase() === 'get') {\n            response = await this.axios.get(url, config);\n          } else if (method.toLowerCase() === 'post') {\n            response = await this.axios.post(url, data, config);\n          } else if (method.toLowerCase() === 'put') {\n            response = await this.axios.put(url, data, config);\n          } else if (method.toLowerCase() === 'delete') {\n            response = await this.axios.delete(url, config);\n          }\n        }\n\n        return response.data;\n      } catch (error) {\n        lastError = error;\n        retries++;\n        \n        // If we've tried all servers, wait before cycling through them again\n        if (retries % API_SERVERS.length === 0) {\n          await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n        } else {\n          // Try the next server\n          this.switchServer();\n        }\n      }\n    }\n\n    // If all retries failed, throw the last error\n    throw lastError;\n  }\n\n  // Convenience methods for different HTTP verbs\n  async get(url, config = {}) {\n    return this.request('get', url, null, config);\n  }\n\n  async post(url, data = {}, config = {}) {\n    return this.request('post', url, data, config);\n  }\n\n  async put(url, data = {}, config = {}) {\n    return this.request('put', url, data, config);\n  }\n\n  async delete(url, config = {}) {\n    return this.request('delete', url, config);\n  }\n\n  // Authentication methods\n  async login(username, password) {\n    const response = await this.post('/api/login', { username, password });\n    if (response.success) {\n      localStorage.setItem('username', username);\n    }\n    return response;\n  }\n\n  async register(username, password) {\n    const response = await this.post('/api/register', { username, password });\n    if (response.success) {\n      localStorage.setItem('username', username);\n    }\n    return response;\n  }\n\n  async logout() {\n    const response = await this.post('/api/logout');\n    if (response.success) {\n      localStorage.removeItem('username');\n    }\n    return response;\n  }\n\n  async checkAuth() {\n    const username = localStorage.getItem('username');\n    if (!username) {\n      return { success: false };\n    }\n    \n    try {\n      return await this.get(`/api/user?username=${encodeURIComponent(username)}`);\n    } catch (error) {\n      localStorage.removeItem('username');\n      return { success: false };\n    }\n  }\n\n  // Document methods\n  async getDocuments() {\n    const username = this.getCurrentUsername();\n    return this.get(`/api/documents?username=${encodeURIComponent(username)}`);\n  }\n\n  async getDocument(documentId) {\n    const username = this.getCurrentUsername();\n    return this.get(`/api/documents/${documentId}?username=${encodeURIComponent(username)}`);\n  }\n\n  async createDocument(title) {\n    const username = localStorage.getItem('username');\n    return this.post('/api/documents', { title, username });\n  }\n\n  async updateDocumentContent(documentId, content) {\n    const username = localStorage.getItem('username');\n    return this.put(`/api/documents/${documentId}/content`, { content, username });\n  }\n\n  async updateDocumentTitle(documentId, title) {\n    const username = localStorage.getItem('username');\n    return this.put(`/api/documents/${documentId}/title`, { title, username });\n  }\n\n  async deleteDocument(documentId) {\n    const username = localStorage.getItem('username');\n    return this.delete(`/api/documents/${documentId}?username=${encodeURIComponent(username)}`);\n  }\n\n  async getUsers() {\n    const username = localStorage.getItem('username');\n    return this.get(`/api/users?username=${encodeURIComponent(username)}`);\n  }\n\n  async addUserToDocument(documentId, userToAdd) {\n    const currentUsername = localStorage.getItem('username');\n    \n    // Enhanced debugging for username retrieval\n    console.log('DEBUG - localStorage contents:', {\n      username: localStorage.getItem('username'),\n      allKeys: Object.keys(localStorage),\n      documentId,\n      userToAdd\n    });\n    \n    // Check if username is missing and provide clear error\n    if (!currentUsername) {\n      console.error('ERROR: No username found in localStorage! User must be logged in to share documents.');\n      return Promise.reject(new Error('No username found in localStorage. Please log out and log back in.'));\n    }\n    \n    console.log(`User ${currentUsername} sharing document ${documentId} with user ${userToAdd}`);\n    \n    // Pass both the current user (owner_username) and the user to add (username)\n    return this.post(`/api/documents/${documentId}/users`, { \n      username: userToAdd,\n      owner_username: currentUsername \n    });\n  }\n  \n  async removeUserFromDocument(documentId, userToRemove) {\n    const currentUsername = localStorage.getItem('username');\n    console.log(`User ${currentUsername} removing user ${userToRemove} from document ${documentId}`);\n    \n    // Pass the owner_username as a query parameter for DELETE requests\n    return this.delete(`/api/documents/${documentId}/users/${userToRemove}?owner_username=${encodeURIComponent(currentUsername)}`);\n  }\n\n  async getClusterStatus() {\n    return this.get('/api/cluster/status');\n  }\n  \n  /**\n   * Helper method to get the current username from localStorage\n   * Handles both direct username and username stored in collaborationUser object\n   */\n  getCurrentUsername() {\n    // First try to get username directly (for backward compatibility)\n    const directUsername = localStorage.getItem('username');\n    if (directUsername) return directUsername;\n    \n    // If not found, try to get it from the collaborationUser object\n    const userJson = localStorage.getItem('collaborationUser');\n    if (userJson) {\n      try {\n        const userObj = JSON.parse(userJson);\n        if (userObj && userObj.username) {\n          // For convenience, also set it directly for future use\n          localStorage.setItem('username', userObj.username);\n          return userObj.username;\n        }\n      } catch (e) {\n        console.error('Error parsing user JSON from localStorage:', e);\n      }\n    }\n    \n    return null;\n  }\n}\n\n// Create and export a singleton instance\nconst apiClient = new ApiClient();\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}