{"ast":null,"code":"import axios from 'axios';\nimport { API_SERVERS, DEFAULT_SERVER, REQUEST_TIMEOUT, MAX_RETRIES, RETRY_DELAY } from '../config';\n\n/**\n * API Client for the distributed collaboration system\n * Handles communication with the backend servers, including retries and failover\n */\nclass ApiClient {\n  constructor() {\n    this.currentServerIndex = 0;\n    this.currentServer = DEFAULT_SERVER;\n    this.axios = axios.create({\n      baseURL: this.currentServer,\n      timeout: REQUEST_TIMEOUT,\n      withCredentials: true\n    });\n  }\n\n  /**\n   * Switch to the next available server in the cluster\n   */\n  switchServer() {\n    this.currentServerIndex = (this.currentServerIndex + 1) % API_SERVERS.length;\n    this.currentServer = API_SERVERS[this.currentServerIndex];\n    this.axios.defaults.baseURL = this.currentServer;\n    console.log(`Switched to server: ${this.currentServer}`);\n  }\n\n  /**\n   * Make an API request with automatic retries and server failover\n   * @param {String} method - HTTP method (get, post, put, delete)\n   * @param {String} url - API endpoint\n   * @param {Object} data - Request data (for POST, PUT)\n   * @param {Object} config - Additional axios config\n   * @returns {Promise} - Promise resolving to the API response\n   */\n  async request(method, url, data = null, config = {}) {\n    // Make sure username is included in all requests to avoid session confusion\n    const username = localStorage.getItem('username');\n    if (username) {\n      if (!url.includes('?')) {\n        url = `${url}?username=${encodeURIComponent(username)}`;\n      } else if (!url.includes('username=')) {\n        url = `${url}&username=${encodeURIComponent(username)}`;\n      }\n    }\n    let retries = 0;\n    let lastError = null;\n    while (retries < MAX_RETRIES * API_SERVERS.length) {\n      try {\n        let response;\n        if (method.toLowerCase() === 'get') {\n          response = await this.axios.get(url, config);\n        } else if (method.toLowerCase() === 'post') {\n          response = await this.axios.post(url, data, config);\n        } else if (method.toLowerCase() === 'put') {\n          response = await this.axios.put(url, data, config);\n        } else if (method.toLowerCase() === 'delete') {\n          response = await this.axios.delete(url, config);\n        }\n\n        // If we get a redirect to the leader, follow it\n        if (response.data && response.data.redirect_to_leader) {\n          const leaderUrl = response.data.leader_url;\n          console.log(`Redirecting to leader: ${leaderUrl}`);\n          this.axios.defaults.baseURL = leaderUrl;\n          this.currentServer = leaderUrl;\n\n          // Retry the request with the leader\n          if (method.toLowerCase() === 'get') {\n            response = await this.axios.get(url, config);\n          } else if (method.toLowerCase() === 'post') {\n            response = await this.axios.post(url, data, config);\n          } else if (method.toLowerCase() === 'put') {\n            response = await this.axios.put(url, data, config);\n          } else if (method.toLowerCase() === 'delete') {\n            response = await this.axios.delete(url, config);\n          }\n        }\n        return response.data;\n      } catch (error) {\n        lastError = error;\n        retries++;\n\n        // If we've tried all servers, wait before cycling through them again\n        if (retries % API_SERVERS.length === 0) {\n          await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n        } else {\n          // Try the next server\n          this.switchServer();\n        }\n      }\n    }\n\n    // If all retries failed, throw the last error\n    throw lastError;\n  }\n\n  // Convenience methods for different HTTP verbs\n  async get(url, config = {}) {\n    return this.request('get', url, null, config);\n  }\n  async post(url, data = {}, config = {}) {\n    return this.request('post', url, data, config);\n  }\n  async put(url, data = {}, config = {}) {\n    return this.request('put', url, data, config);\n  }\n  async delete(url, config = {}) {\n    return this.request('delete', url, config);\n  }\n\n  // Authentication methods\n  async login(username, password) {\n    const response = await this.post('/api/login', {\n      username,\n      password\n    });\n    if (response.success) {\n      localStorage.setItem('username', username);\n    }\n    return response;\n  }\n  async register(username, password) {\n    const response = await this.post('/api/register', {\n      username,\n      password\n    });\n    if (response.success) {\n      localStorage.setItem('username', username);\n    }\n    return response;\n  }\n  async logout() {\n    const response = await this.post('/api/logout');\n    if (response.success) {\n      localStorage.removeItem('username');\n    }\n    return response;\n  }\n  async checkAuth() {\n    const username = localStorage.getItem('username');\n    if (!username) {\n      return {\n        success: false\n      };\n    }\n    try {\n      return await this.get(`/api/user?username=${encodeURIComponent(username)}`);\n    } catch (error) {\n      localStorage.removeItem('username');\n      return {\n        success: false\n      };\n    }\n  }\n\n  // Document methods\n  async getDocuments() {\n    const username = localStorage.getItem('username');\n    return this.get(`/api/documents?username=${encodeURIComponent(username)}`);\n  }\n  async getDocument(documentId) {\n    const username = localStorage.getItem('username');\n    return this.get(`/api/documents/${documentId}?username=${encodeURIComponent(username)}`);\n  }\n  async createDocument(title) {\n    const username = localStorage.getItem('username');\n    return this.post('/api/documents', {\n      title,\n      username\n    });\n  }\n  async updateDocumentContent(documentId, content) {\n    const username = localStorage.getItem('username');\n    return this.put(`/api/documents/${documentId}/content`, {\n      content,\n      username\n    });\n  }\n  async updateDocumentTitle(documentId, title) {\n    const username = localStorage.getItem('username');\n    return this.put(`/api/documents/${documentId}/title`, {\n      title,\n      username\n    });\n  }\n  async deleteDocument(documentId) {\n    const username = localStorage.getItem('username');\n    return this.delete(`/api/documents/${documentId}?username=${encodeURIComponent(username)}`);\n  }\n  async getUsers() {\n    const username = localStorage.getItem('username');\n    return this.get(`/api/users?username=${encodeURIComponent(username)}`);\n  }\n  async addUserToDocument(documentId, userToAdd) {\n    const username = localStorage.getItem('username');\n    console.log(`Sharing document ${documentId} with user ${userToAdd} by ${username}`);\n    return this.post(`/api/documents/${documentId}/users`, {\n      username,\n      user_to_add: userToAdd\n    });\n  }\n  async getClusterStatus() {\n    return this.get('/api/cluster/status');\n  }\n}\n\n// Create and export a singleton instance\nconst apiClient = new ApiClient();\nexport default apiClient;","map":{"version":3,"names":["axios","API_SERVERS","DEFAULT_SERVER","REQUEST_TIMEOUT","MAX_RETRIES","RETRY_DELAY","ApiClient","constructor","currentServerIndex","currentServer","create","baseURL","timeout","withCredentials","switchServer","length","defaults","console","log","request","method","url","data","config","username","localStorage","getItem","includes","encodeURIComponent","retries","lastError","response","toLowerCase","get","post","put","delete","redirect_to_leader","leaderUrl","leader_url","error","Promise","resolve","setTimeout","login","password","success","setItem","register","logout","removeItem","checkAuth","getDocuments","getDocument","documentId","createDocument","title","updateDocumentContent","content","updateDocumentTitle","deleteDocument","getUsers","addUserToDocument","userToAdd","user_to_add","getClusterStatus","apiClient"],"sources":["/Users/doug/collaboration/client/src/services/ApiClient.js"],"sourcesContent":["import axios from 'axios';\nimport { API_SERVERS, DEFAULT_SERVER, REQUEST_TIMEOUT, MAX_RETRIES, RETRY_DELAY } from '../config';\n\n/**\n * API Client for the distributed collaboration system\n * Handles communication with the backend servers, including retries and failover\n */\nclass ApiClient {\n  constructor() {\n    this.currentServerIndex = 0;\n    this.currentServer = DEFAULT_SERVER;\n    this.axios = axios.create({\n      baseURL: this.currentServer,\n      timeout: REQUEST_TIMEOUT,\n      withCredentials: true\n    });\n  }\n\n  /**\n   * Switch to the next available server in the cluster\n   */\n  switchServer() {\n    this.currentServerIndex = (this.currentServerIndex + 1) % API_SERVERS.length;\n    this.currentServer = API_SERVERS[this.currentServerIndex];\n    this.axios.defaults.baseURL = this.currentServer;\n    console.log(`Switched to server: ${this.currentServer}`);\n  }\n\n  /**\n   * Make an API request with automatic retries and server failover\n   * @param {String} method - HTTP method (get, post, put, delete)\n   * @param {String} url - API endpoint\n   * @param {Object} data - Request data (for POST, PUT)\n   * @param {Object} config - Additional axios config\n   * @returns {Promise} - Promise resolving to the API response\n   */\n  async request(method, url, data = null, config = {}) {\n    // Make sure username is included in all requests to avoid session confusion\n    const username = localStorage.getItem('username');\n    if (username) {\n      if (!url.includes('?')) {\n        url = `${url}?username=${encodeURIComponent(username)}`;\n      } else if (!url.includes('username=')) {\n        url = `${url}&username=${encodeURIComponent(username)}`;\n      }\n    }\n\n    let retries = 0;\n    let lastError = null;\n\n    while (retries < MAX_RETRIES * API_SERVERS.length) {\n      try {\n        let response;\n        \n        if (method.toLowerCase() === 'get') {\n          response = await this.axios.get(url, config);\n        } else if (method.toLowerCase() === 'post') {\n          response = await this.axios.post(url, data, config);\n        } else if (method.toLowerCase() === 'put') {\n          response = await this.axios.put(url, data, config);\n        } else if (method.toLowerCase() === 'delete') {\n          response = await this.axios.delete(url, config);\n        }\n\n        // If we get a redirect to the leader, follow it\n        if (response.data && response.data.redirect_to_leader) {\n          const leaderUrl = response.data.leader_url;\n          console.log(`Redirecting to leader: ${leaderUrl}`);\n          this.axios.defaults.baseURL = leaderUrl;\n          this.currentServer = leaderUrl;\n          \n          // Retry the request with the leader\n          if (method.toLowerCase() === 'get') {\n            response = await this.axios.get(url, config);\n          } else if (method.toLowerCase() === 'post') {\n            response = await this.axios.post(url, data, config);\n          } else if (method.toLowerCase() === 'put') {\n            response = await this.axios.put(url, data, config);\n          } else if (method.toLowerCase() === 'delete') {\n            response = await this.axios.delete(url, config);\n          }\n        }\n\n        return response.data;\n      } catch (error) {\n        lastError = error;\n        retries++;\n        \n        // If we've tried all servers, wait before cycling through them again\n        if (retries % API_SERVERS.length === 0) {\n          await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n        } else {\n          // Try the next server\n          this.switchServer();\n        }\n      }\n    }\n\n    // If all retries failed, throw the last error\n    throw lastError;\n  }\n\n  // Convenience methods for different HTTP verbs\n  async get(url, config = {}) {\n    return this.request('get', url, null, config);\n  }\n\n  async post(url, data = {}, config = {}) {\n    return this.request('post', url, data, config);\n  }\n\n  async put(url, data = {}, config = {}) {\n    return this.request('put', url, data, config);\n  }\n\n  async delete(url, config = {}) {\n    return this.request('delete', url, config);\n  }\n\n  // Authentication methods\n  async login(username, password) {\n    const response = await this.post('/api/login', { username, password });\n    if (response.success) {\n      localStorage.setItem('username', username);\n    }\n    return response;\n  }\n\n  async register(username, password) {\n    const response = await this.post('/api/register', { username, password });\n    if (response.success) {\n      localStorage.setItem('username', username);\n    }\n    return response;\n  }\n\n  async logout() {\n    const response = await this.post('/api/logout');\n    if (response.success) {\n      localStorage.removeItem('username');\n    }\n    return response;\n  }\n\n  async checkAuth() {\n    const username = localStorage.getItem('username');\n    if (!username) {\n      return { success: false };\n    }\n    \n    try {\n      return await this.get(`/api/user?username=${encodeURIComponent(username)}`);\n    } catch (error) {\n      localStorage.removeItem('username');\n      return { success: false };\n    }\n  }\n\n  // Document methods\n  async getDocuments() {\n    const username = localStorage.getItem('username');\n    return this.get(`/api/documents?username=${encodeURIComponent(username)}`);\n  }\n\n  async getDocument(documentId) {\n    const username = localStorage.getItem('username');\n    return this.get(`/api/documents/${documentId}?username=${encodeURIComponent(username)}`);\n  }\n\n  async createDocument(title) {\n    const username = localStorage.getItem('username');\n    return this.post('/api/documents', { title, username });\n  }\n\n  async updateDocumentContent(documentId, content) {\n    const username = localStorage.getItem('username');\n    return this.put(`/api/documents/${documentId}/content`, { content, username });\n  }\n\n  async updateDocumentTitle(documentId, title) {\n    const username = localStorage.getItem('username');\n    return this.put(`/api/documents/${documentId}/title`, { title, username });\n  }\n\n  async deleteDocument(documentId) {\n    const username = localStorage.getItem('username');\n    return this.delete(`/api/documents/${documentId}?username=${encodeURIComponent(username)}`);\n  }\n\n  async getUsers() {\n    const username = localStorage.getItem('username');\n    return this.get(`/api/users?username=${encodeURIComponent(username)}`);\n  }\n\n  async addUserToDocument(documentId, userToAdd) {\n    const username = localStorage.getItem('username');\n    console.log(`Sharing document ${documentId} with user ${userToAdd} by ${username}`);\n    return this.post(`/api/documents/${documentId}/users`, { username, user_to_add: userToAdd });\n  }\n\n  async getClusterStatus() {\n    return this.get('/api/cluster/status');\n  }\n}\n\n// Create and export a singleton instance\nconst apiClient = new ApiClient();\nexport default apiClient;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,cAAc,EAAEC,eAAe,EAAEC,WAAW,EAAEC,WAAW,QAAQ,WAAW;;AAElG;AACA;AACA;AACA;AACA,MAAMC,SAAS,CAAC;EACdC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,kBAAkB,GAAG,CAAC;IAC3B,IAAI,CAACC,aAAa,GAAGP,cAAc;IACnC,IAAI,CAACF,KAAK,GAAGA,KAAK,CAACU,MAAM,CAAC;MACxBC,OAAO,EAAE,IAAI,CAACF,aAAa;MAC3BG,OAAO,EAAET,eAAe;MACxBU,eAAe,EAAE;IACnB,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACEC,YAAYA,CAAA,EAAG;IACb,IAAI,CAACN,kBAAkB,GAAG,CAAC,IAAI,CAACA,kBAAkB,GAAG,CAAC,IAAIP,WAAW,CAACc,MAAM;IAC5E,IAAI,CAACN,aAAa,GAAGR,WAAW,CAAC,IAAI,CAACO,kBAAkB,CAAC;IACzD,IAAI,CAACR,KAAK,CAACgB,QAAQ,CAACL,OAAO,GAAG,IAAI,CAACF,aAAa;IAChDQ,OAAO,CAACC,GAAG,CAAC,uBAAuB,IAAI,CAACT,aAAa,EAAE,CAAC;EAC1D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMU,OAAOA,CAACC,MAAM,EAAEC,GAAG,EAAEC,IAAI,GAAG,IAAI,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;IACnD;IACA,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,IAAIF,QAAQ,EAAE;MACZ,IAAI,CAACH,GAAG,CAACM,QAAQ,CAAC,GAAG,CAAC,EAAE;QACtBN,GAAG,GAAG,GAAGA,GAAG,aAAaO,kBAAkB,CAACJ,QAAQ,CAAC,EAAE;MACzD,CAAC,MAAM,IAAI,CAACH,GAAG,CAACM,QAAQ,CAAC,WAAW,CAAC,EAAE;QACrCN,GAAG,GAAG,GAAGA,GAAG,aAAaO,kBAAkB,CAACJ,QAAQ,CAAC,EAAE;MACzD;IACF;IAEA,IAAIK,OAAO,GAAG,CAAC;IACf,IAAIC,SAAS,GAAG,IAAI;IAEpB,OAAOD,OAAO,GAAGzB,WAAW,GAAGH,WAAW,CAACc,MAAM,EAAE;MACjD,IAAI;QACF,IAAIgB,QAAQ;QAEZ,IAAIX,MAAM,CAACY,WAAW,CAAC,CAAC,KAAK,KAAK,EAAE;UAClCD,QAAQ,GAAG,MAAM,IAAI,CAAC/B,KAAK,CAACiC,GAAG,CAACZ,GAAG,EAAEE,MAAM,CAAC;QAC9C,CAAC,MAAM,IAAIH,MAAM,CAACY,WAAW,CAAC,CAAC,KAAK,MAAM,EAAE;UAC1CD,QAAQ,GAAG,MAAM,IAAI,CAAC/B,KAAK,CAACkC,IAAI,CAACb,GAAG,EAAEC,IAAI,EAAEC,MAAM,CAAC;QACrD,CAAC,MAAM,IAAIH,MAAM,CAACY,WAAW,CAAC,CAAC,KAAK,KAAK,EAAE;UACzCD,QAAQ,GAAG,MAAM,IAAI,CAAC/B,KAAK,CAACmC,GAAG,CAACd,GAAG,EAAEC,IAAI,EAAEC,MAAM,CAAC;QACpD,CAAC,MAAM,IAAIH,MAAM,CAACY,WAAW,CAAC,CAAC,KAAK,QAAQ,EAAE;UAC5CD,QAAQ,GAAG,MAAM,IAAI,CAAC/B,KAAK,CAACoC,MAAM,CAACf,GAAG,EAAEE,MAAM,CAAC;QACjD;;QAEA;QACA,IAAIQ,QAAQ,CAACT,IAAI,IAAIS,QAAQ,CAACT,IAAI,CAACe,kBAAkB,EAAE;UACrD,MAAMC,SAAS,GAAGP,QAAQ,CAACT,IAAI,CAACiB,UAAU;UAC1CtB,OAAO,CAACC,GAAG,CAAC,0BAA0BoB,SAAS,EAAE,CAAC;UAClD,IAAI,CAACtC,KAAK,CAACgB,QAAQ,CAACL,OAAO,GAAG2B,SAAS;UACvC,IAAI,CAAC7B,aAAa,GAAG6B,SAAS;;UAE9B;UACA,IAAIlB,MAAM,CAACY,WAAW,CAAC,CAAC,KAAK,KAAK,EAAE;YAClCD,QAAQ,GAAG,MAAM,IAAI,CAAC/B,KAAK,CAACiC,GAAG,CAACZ,GAAG,EAAEE,MAAM,CAAC;UAC9C,CAAC,MAAM,IAAIH,MAAM,CAACY,WAAW,CAAC,CAAC,KAAK,MAAM,EAAE;YAC1CD,QAAQ,GAAG,MAAM,IAAI,CAAC/B,KAAK,CAACkC,IAAI,CAACb,GAAG,EAAEC,IAAI,EAAEC,MAAM,CAAC;UACrD,CAAC,MAAM,IAAIH,MAAM,CAACY,WAAW,CAAC,CAAC,KAAK,KAAK,EAAE;YACzCD,QAAQ,GAAG,MAAM,IAAI,CAAC/B,KAAK,CAACmC,GAAG,CAACd,GAAG,EAAEC,IAAI,EAAEC,MAAM,CAAC;UACpD,CAAC,MAAM,IAAIH,MAAM,CAACY,WAAW,CAAC,CAAC,KAAK,QAAQ,EAAE;YAC5CD,QAAQ,GAAG,MAAM,IAAI,CAAC/B,KAAK,CAACoC,MAAM,CAACf,GAAG,EAAEE,MAAM,CAAC;UACjD;QACF;QAEA,OAAOQ,QAAQ,CAACT,IAAI;MACtB,CAAC,CAAC,OAAOkB,KAAK,EAAE;QACdV,SAAS,GAAGU,KAAK;QACjBX,OAAO,EAAE;;QAET;QACA,IAAIA,OAAO,GAAG5B,WAAW,CAACc,MAAM,KAAK,CAAC,EAAE;UACtC,MAAM,IAAI0B,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAErC,WAAW,CAAC,CAAC;QAChE,CAAC,MAAM;UACL;UACA,IAAI,CAACS,YAAY,CAAC,CAAC;QACrB;MACF;IACF;;IAEA;IACA,MAAMgB,SAAS;EACjB;;EAEA;EACA,MAAMG,GAAGA,CAACZ,GAAG,EAAEE,MAAM,GAAG,CAAC,CAAC,EAAE;IAC1B,OAAO,IAAI,CAACJ,OAAO,CAAC,KAAK,EAAEE,GAAG,EAAE,IAAI,EAAEE,MAAM,CAAC;EAC/C;EAEA,MAAMW,IAAIA,CAACb,GAAG,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;IACtC,OAAO,IAAI,CAACJ,OAAO,CAAC,MAAM,EAAEE,GAAG,EAAEC,IAAI,EAAEC,MAAM,CAAC;EAChD;EAEA,MAAMY,GAAGA,CAACd,GAAG,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;IACrC,OAAO,IAAI,CAACJ,OAAO,CAAC,KAAK,EAAEE,GAAG,EAAEC,IAAI,EAAEC,MAAM,CAAC;EAC/C;EAEA,MAAMa,MAAMA,CAACf,GAAG,EAAEE,MAAM,GAAG,CAAC,CAAC,EAAE;IAC7B,OAAO,IAAI,CAACJ,OAAO,CAAC,QAAQ,EAAEE,GAAG,EAAEE,MAAM,CAAC;EAC5C;;EAEA;EACA,MAAMqB,KAAKA,CAACpB,QAAQ,EAAEqB,QAAQ,EAAE;IAC9B,MAAMd,QAAQ,GAAG,MAAM,IAAI,CAACG,IAAI,CAAC,YAAY,EAAE;MAAEV,QAAQ;MAAEqB;IAAS,CAAC,CAAC;IACtE,IAAId,QAAQ,CAACe,OAAO,EAAE;MACpBrB,YAAY,CAACsB,OAAO,CAAC,UAAU,EAAEvB,QAAQ,CAAC;IAC5C;IACA,OAAOO,QAAQ;EACjB;EAEA,MAAMiB,QAAQA,CAACxB,QAAQ,EAAEqB,QAAQ,EAAE;IACjC,MAAMd,QAAQ,GAAG,MAAM,IAAI,CAACG,IAAI,CAAC,eAAe,EAAE;MAAEV,QAAQ;MAAEqB;IAAS,CAAC,CAAC;IACzE,IAAId,QAAQ,CAACe,OAAO,EAAE;MACpBrB,YAAY,CAACsB,OAAO,CAAC,UAAU,EAAEvB,QAAQ,CAAC;IAC5C;IACA,OAAOO,QAAQ;EACjB;EAEA,MAAMkB,MAAMA,CAAA,EAAG;IACb,MAAMlB,QAAQ,GAAG,MAAM,IAAI,CAACG,IAAI,CAAC,aAAa,CAAC;IAC/C,IAAIH,QAAQ,CAACe,OAAO,EAAE;MACpBrB,YAAY,CAACyB,UAAU,CAAC,UAAU,CAAC;IACrC;IACA,OAAOnB,QAAQ;EACjB;EAEA,MAAMoB,SAASA,CAAA,EAAG;IAChB,MAAM3B,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,IAAI,CAACF,QAAQ,EAAE;MACb,OAAO;QAAEsB,OAAO,EAAE;MAAM,CAAC;IAC3B;IAEA,IAAI;MACF,OAAO,MAAM,IAAI,CAACb,GAAG,CAAC,sBAAsBL,kBAAkB,CAACJ,QAAQ,CAAC,EAAE,CAAC;IAC7E,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACdf,YAAY,CAACyB,UAAU,CAAC,UAAU,CAAC;MACnC,OAAO;QAAEJ,OAAO,EAAE;MAAM,CAAC;IAC3B;EACF;;EAEA;EACA,MAAMM,YAAYA,CAAA,EAAG;IACnB,MAAM5B,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,OAAO,IAAI,CAACO,GAAG,CAAC,2BAA2BL,kBAAkB,CAACJ,QAAQ,CAAC,EAAE,CAAC;EAC5E;EAEA,MAAM6B,WAAWA,CAACC,UAAU,EAAE;IAC5B,MAAM9B,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,OAAO,IAAI,CAACO,GAAG,CAAC,kBAAkBqB,UAAU,aAAa1B,kBAAkB,CAACJ,QAAQ,CAAC,EAAE,CAAC;EAC1F;EAEA,MAAM+B,cAAcA,CAACC,KAAK,EAAE;IAC1B,MAAMhC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,OAAO,IAAI,CAACQ,IAAI,CAAC,gBAAgB,EAAE;MAAEsB,KAAK;MAAEhC;IAAS,CAAC,CAAC;EACzD;EAEA,MAAMiC,qBAAqBA,CAACH,UAAU,EAAEI,OAAO,EAAE;IAC/C,MAAMlC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,OAAO,IAAI,CAACS,GAAG,CAAC,kBAAkBmB,UAAU,UAAU,EAAE;MAAEI,OAAO;MAAElC;IAAS,CAAC,CAAC;EAChF;EAEA,MAAMmC,mBAAmBA,CAACL,UAAU,EAAEE,KAAK,EAAE;IAC3C,MAAMhC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,OAAO,IAAI,CAACS,GAAG,CAAC,kBAAkBmB,UAAU,QAAQ,EAAE;MAAEE,KAAK;MAAEhC;IAAS,CAAC,CAAC;EAC5E;EAEA,MAAMoC,cAAcA,CAACN,UAAU,EAAE;IAC/B,MAAM9B,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,OAAO,IAAI,CAACU,MAAM,CAAC,kBAAkBkB,UAAU,aAAa1B,kBAAkB,CAACJ,QAAQ,CAAC,EAAE,CAAC;EAC7F;EAEA,MAAMqC,QAAQA,CAAA,EAAG;IACf,MAAMrC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,OAAO,IAAI,CAACO,GAAG,CAAC,uBAAuBL,kBAAkB,CAACJ,QAAQ,CAAC,EAAE,CAAC;EACxE;EAEA,MAAMsC,iBAAiBA,CAACR,UAAU,EAAES,SAAS,EAAE;IAC7C,MAAMvC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjDT,OAAO,CAACC,GAAG,CAAC,oBAAoBoC,UAAU,cAAcS,SAAS,OAAOvC,QAAQ,EAAE,CAAC;IACnF,OAAO,IAAI,CAACU,IAAI,CAAC,kBAAkBoB,UAAU,QAAQ,EAAE;MAAE9B,QAAQ;MAAEwC,WAAW,EAAED;IAAU,CAAC,CAAC;EAC9F;EAEA,MAAME,gBAAgBA,CAAA,EAAG;IACvB,OAAO,IAAI,CAAChC,GAAG,CAAC,qBAAqB,CAAC;EACxC;AACF;;AAEA;AACA,MAAMiC,SAAS,GAAG,IAAI5D,SAAS,CAAC,CAAC;AACjC,eAAe4D,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}